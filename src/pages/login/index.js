import { useContext, useState } from 'react'
import Link from 'next/link'
import Alert from '@mui/material/Alert'
import Button from '@mui/material/Button'
import Divider from '@mui/material/Divider'
import Typography from '@mui/material/Typography'
import IconButton from '@mui/material/IconButton'
import Box from '@mui/material/Box'
import useMediaQuery from '@mui/material/useMediaQuery'
import { styled, useTheme } from '@mui/material/styles'
import InputAdornment from '@mui/material/InputAdornment'
import CustomTextField from 'src/@core/components/mui/text-field'
import Icon from 'src/@core/components/icon'
import * as yup from 'yup'
import { useForm, Controller } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import { useSettings } from 'src/@core/hooks/useSettings'
import BlankLayout from 'src/@core/layouts/BlankLayout'
import FooterIllustrationsV2 from 'src/views/pages/auth/FooterIllustrationsV2'
import API from 'src/utils/api'
import { useRouter } from 'next/router'
import { AuthContext } from 'src/context/AuthContext'
import 'react-toastify/dist/ReactToastify.css'
import toast from 'react-hot-toast'
import Swal from 'sweetalert2'
import LoadingOverlay from '../loader/index'
import { GoogleLogin } from '@react-oauth/google'

const LoginIllustration = styled('img')(({ theme }) => ({
  zIndex: 2,
  maxHeight: 680,
  marginTop: theme.spacing(12),
  marginBottom: theme.spacing(12),
  [theme.breakpoints.down(1540)]: {
    maxHeight: 550
  },
  [theme.breakpoints.down('lg')]: {
    maxHeight: 500
  }
}))

const RightWrapper = styled(Box)(({ theme }) => ({
  width: '100%',
  [theme.breakpoints.up('md')]: {
    maxWidth: 450
  },
  [theme.breakpoints.up('lg')]: {
    maxWidth: 600
  },
  [theme.breakpoints.up('xl')]: {
    maxWidth: 750
  }
}))

const LinkStyled = styled(Link)(({ theme }) => ({
  textDecoration: 'none',
  color: `${theme.palette.primary.main} !important`
}))

const schema = yup.object().shape({
  email: yup.string().email().required(),
  password: yup.string().min(8).required()
})

const defaultValues = {
  password: '',
  email: ''
}

const LoginPage = () => {
  const router = useRouter()
  const { user, setUser } = useContext(AuthContext)
  const [error, seterror] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const theme = useTheme()
  const { settings } = useSettings()
  const hidden = useMediaQuery(theme.breakpoints.down('md'))
  const { skin } = settings

  const {
    control,
    setError,
    handleSubmit,
    formState: { errors }
  } = useForm({
    defaultValues,
    mode: 'onSubmit',
    resolver: yupResolver(schema)
  })

  const Toast = Swal.mixin({
    toast: true,
    position: 'top-end',
    showConfirmButton: false,
    timer: 3000,
    timerProgressBar: true
  })

  const onSuccess = async codeResponse => {
    setIsLoading(true)
    try {
      const response = await API.signInWithGoogle(codeResponse)
      if (response.status === 200) {
        const authData = await API.authMe()

        if (authData.status === 200) {
          setUser(authData.data)
          await router.push('/home')
        } else {
          setUser(null)
          seterror(authData?.response?.data?.error[0]?.message)
        }
      }
    } catch (error) {
      setUser(null)
      seterror(error?.response?.data?.error[0]?.message)
    } finally {
      setIsLoading(false)
    }
  }

  const onError = error => {
    console.log('Login Failed:', error)
  }

  const handleLogin = async data => {
    setIsLoading(true)
    try {
      const response = await API.login(data)
      if (response.status === 200) {
        // setUser(response.data)
        const authData = await API.authMe()

        if (authData.status === 200) {
          setUser(authData.data)
          await router.push('/home')
        } else {
          setUser(null)
          seterror(authData?.response?.data?.error[0]?.message)
        }
      }
    } catch (error) {
      setUser(null)
      seterror(error?.response?.data?.error[0]?.message)
    } finally {
      setIsLoading(false)
    }
  }

  const imageSource = skin === 'bordered' ? 'auth-v2-login-illustration-bordered' : 'auth-v2-login-illustration'

  return (
    <>
      <LoadingOverlay isLoading={isLoading} />
      <Box className='content-right' sx={{ backgroundColor: 'background.paper' }}>
        {!hidden ? (
          <Box
            sx={{
              flex: 1,
              display: 'flex',
              position: 'relative',
              alignItems: 'center',
              borderRadius: '20px',
              justifyContent: 'center',
              backgroundColor: 'customColors.bodyBg',
              margin: theme => theme.spacing(8, 0, 8, 8)
            }}
          >
            <LoginIllustration
              alt='login-illustration'
              src={`/images/pages/${imageSource}-${theme.palette.mode}.png`}
            />
            <FooterIllustrationsV2 />
          </Box>
        ) : null}
        <RightWrapper>
          <Box
            sx={{
              p: [6, 12],
              height: '100%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          >
            <Box sx={{ width: '100%', maxWidth: 400 }}>
              <Box sx={{ width: '200px', height: '60px', marginLeft: '-5px' }}>
                <svg viewBox='0 0 800 400' xmlns='http://www.w3.org/2000/svg' width='100%'>
                  <path
                    opacity={1}
                    stroke='none'
                    d='&#10;M478.000000,401.000000 &#10;&#9;C318.666656,401.000000 159.833328,401.000000 1.000000,401.000000 &#10;&#9;C1.000000,267.666656 1.000000,134.333328 1.000000,1.000000 &#10;&#9;C267.666656,1.000000 534.333313,1.000000 801.000000,1.000000 &#10;&#9;C801.000000,134.333328 801.000000,267.666656 801.000000,401.000000 &#10;&#9;C693.500000,401.000000 586.000000,401.000000 478.000000,401.000000 &#10;M188.975052,124.785065 &#10;&#9;C190.887070,120.930504 192.913803,117.127579 194.678696,113.206787 &#10;&#9;C196.425140,109.326942 195.441772,108.401428 191.236694,108.229630 &#10;&#9;C185.150497,107.980965 179.015396,107.597969 173.028015,106.548531 &#10;&#9;C161.677139,104.558998 151.822693,106.766663 145.564178,116.915344 &#10;&#9;C141.254578,123.903679 138.435822,131.800842 134.742462,139.187668 &#10;&#9;C133.889694,140.893234 132.243271,143.393005 130.864319,143.458130 &#10;&#9;C118.600555,144.037582 106.101639,145.686111 94.089172,144.017197 &#10;&#9;C78.871071,141.902908 63.769886,140.093140 48.481258,141.160370 &#10;&#9;C41.928608,141.617783 35.374634,143.203461 29.020222,144.985825 &#10;&#9;C24.054470,146.378662 23.623928,149.036285 27.674629,152.285797 &#10;&#9;C30.189594,154.303314 33.361282,155.693558 36.448086,156.754959 &#10;&#9;C39.772068,157.897934 41.819485,159.821945 43.865719,162.724731 &#10;&#9;C47.143929,167.375198 51.368687,171.380402 55.347584,175.509750 &#10;&#9;C60.976364,181.351364 66.998199,186.835800 72.342171,192.920700 &#10;&#9;C74.811485,195.732391 76.074547,199.603439 78.137924,203.468903 &#10;&#9;C71.172424,205.526779 65.346649,207.484360 59.400322,208.954193 &#10;&#9;C47.970562,211.779434 36.426533,214.152359 25.038071,217.127029 &#10;&#9;C22.485922,217.793655 20.379303,220.165955 18.067568,221.753006 &#10;&#9;C20.406879,223.249496 22.719191,224.791214 25.102488,226.214020 &#10;&#9;C25.789675,226.624268 26.667992,226.775055 27.481022,226.904709 &#10;&#9;C40.064758,228.911331 52.652184,230.894821 65.998016,233.065201 &#10;&#9;C68.101448,233.440201 70.193336,233.905289 72.310074,234.176437 &#10;&#9;C97.509071,237.404724 121.400085,233.191483 142.892731,219.578720 &#10;&#9;C177.276505,197.801102 189.633820,164.789932 188.975052,124.785065 &#10;M346.628601,197.930771 &#10;&#9;C348.807312,204.796890 352.643219,208.695908 360.684570,207.407013 &#10;&#9;C363.834442,206.902145 365.667938,206.298279 367.096405,203.308899 &#10;&#9;C372.619598,191.750687 378.424377,180.326920 384.138702,168.860260 &#10;&#9;C385.216156,166.698135 386.359619,164.568909 387.472595,162.424515 &#10;&#9;C387.871399,162.510315 388.270203,162.596115 388.669006,162.681931 &#10;&#9;C388.669006,181.662811 388.669006,200.643692 388.669006,219.726990 &#10;&#9;C394.758545,219.726990 400.159485,219.726990 405.669434,219.726990 &#10;&#9;C405.669434,189.905167 405.669434,160.365387 405.669434,130.346390 &#10;&#9;C400.087158,130.346390 394.784210,130.528183 389.501678,130.278091 &#10;&#9;C386.342590,130.128510 384.843018,131.338745 383.510590,134.151840 &#10;&#9;C376.104034,149.789047 368.472504,165.319794 360.895294,180.875946 &#10;&#9;C360.154175,182.397507 359.258606,183.843857 358.122101,185.887146 &#10;&#9;C356.852112,183.423157 355.921021,181.691788 355.056671,179.927704 &#10;&#9;C347.589478,164.687454 340.169373,149.423904 332.619843,134.224594 &#10;&#9;C331.885590,132.746231 330.435364,130.628098 329.212921,130.554977 &#10;&#9;C322.970734,130.181564 316.694183,130.382446 310.529114,130.382446 &#10;&#9;C310.529114,160.662811 310.529114,190.216400 310.529114,219.686157 &#10;&#9;C316.302704,219.686157 321.707214,219.686157 327.689240,219.686157 &#10;&#9;C327.689240,200.393295 327.689240,181.415543 327.689240,162.437790 &#10;&#9;C328.037292,162.364853 328.385345,162.291916 328.733429,162.218979 &#10;&#9;C334.574432,173.906815 340.415466,185.594635 346.628601,197.930771 &#10;M628.151245,153.521896 &#10;&#9;C629.321716,152.897293 630.434326,152.106003 631.672424,151.675964 &#10;&#9;C638.262207,149.386963 644.949402,148.957230 650.700867,153.390442 &#10;&#9;C655.389771,157.004700 656.359619,162.441437 655.646729,168.840866 &#10;&#9;C646.948425,168.840866 638.429688,168.181824 630.070618,169.053207 &#10;&#9;C623.598999,169.727814 616.932922,171.482010 611.059509,174.253067 &#10;&#9;C602.443359,178.318130 598.803101,186.283463 599.072205,195.642380 &#10;&#9;C599.345764,205.156601 603.319092,213.202042 612.429626,216.715714 &#10;&#9;C618.615662,219.101486 625.608765,220.211014 632.273193,220.350662 &#10;&#9;C642.533508,220.565659 650.640625,215.398514 657.119324,206.179901 &#10;&#9;C657.892029,209.925888 658.279297,212.682022 659.083740,215.310471 &#10;&#9;C659.451477,216.511810 660.598633,218.341385 661.464600,218.383087 &#10;&#9;C667.187073,218.658661 672.929138,218.525513 678.835205,218.525513 &#10;&#9;C678.835205,200.474075 678.836792,183.327530 678.832031,166.180969 &#10;&#9;C678.831665,164.849060 678.871399,163.509293 678.748535,162.186539 &#10;&#9;C678.069763,154.874557 675.835327,148.240829 670.552673,142.838776 &#10;&#9;C655.343811,127.286247 623.581360,127.764099 608.955872,143.895248 &#10;&#9;C604.630920,148.665405 601.977661,154.229324 601.740417,161.325928 &#10;&#9;C605.147278,161.325928 608.116577,161.230927 611.077820,161.345184 &#10;&#9;C617.803772,161.604736 624.767395,162.510147 628.151245,153.521896 &#10;M422.550476,153.108948 &#10;&#9;C410.349640,176.495377 419.013885,204.473694 442.136139,216.354294 &#10;&#9;C464.447388,227.818176 492.568298,218.941849 504.024261,196.393692 &#10;&#9;C499.972839,194.917038 495.894012,193.636505 491.995422,191.941345 &#10;&#9;C489.105743,190.684830 487.233490,191.039124 485.218567,193.628571 &#10;&#9;C480.976990,199.079605 475.266724,202.604660 468.422302,203.515518 &#10;&#9;C461.614471,204.421539 454.684784,204.748718 447.661011,200.042206 &#10;&#9;C456.775940,191.026489 465.403076,182.531738 473.986206,173.992798 &#10;&#9;C482.697113,165.326767 491.364685,156.617126 500.127350,147.850418 &#10;&#9;C499.465363,146.854416 499.072357,146.136612 498.562622,145.514450 &#10;&#9;C479.498535,122.245033 440.706177,122.399536 422.550476,153.108948 &#10;M582.083130,211.597321 &#10;&#9;C586.446167,206.922821 590.809204,202.248337 595.873047,196.823059 &#10;&#9;C590.391479,194.838272 586.162781,193.478317 582.081604,191.766708 &#10;&#9;C579.536560,190.699326 577.964783,191.062851 576.092163,193.215546 &#10;&#9;C573.833557,195.811981 571.179138,198.239441 568.271484,200.063065 &#10;&#9;C559.557739,205.528214 545.581848,205.441162 538.854004,199.964523 &#10;&#9;C540.089172,198.644882 541.273010,197.306534 542.533447,196.044754 &#10;&#9;C557.473572,181.088531 572.340759,166.057556 587.445618,151.269272 &#10;&#9;C590.442810,148.334824 590.348267,146.543503 587.562988,143.674255 &#10;&#9;C574.529785,130.247971 558.775757,125.722839 541.061829,130.852478 &#10;&#9;C522.275818,136.292587 511.068085,149.472229 508.053467,168.869141 &#10;&#9;C505.156555,187.508652 514.303284,205.596802 530.798157,215.324158 &#10;&#9;C546.239319,224.430099 566.444519,223.115555 582.083130,211.597321 &#10;M241.434464,129.809998 &#10;&#9;C231.504776,131.511536 223.416489,136.412384 217.067276,144.136673 &#10;&#9;C208.172760,154.957520 205.702667,167.683441 207.097473,181.192291 &#10;&#9;C211.214264,221.064240 252.089111,229.991684 275.898560,214.451218 &#10;&#9;C290.879120,204.673370 295.646332,189.757126 295.221558,172.559738 &#10;&#9;C294.504822,143.539871 270.957825,124.359100 241.434464,129.809998 &#10;M722.186768,167.500031 &#10;&#9;C722.186768,157.084747 722.186768,146.669464 722.186768,136.390259 &#10;&#9;C715.260620,136.390259 709.041626,136.390259 702.908691,136.390259 &#10;&#9;C702.908691,165.042679 702.908691,193.304764 702.908691,221.703217 &#10;&#9;C709.409241,221.703217 715.644592,221.703217 722.186829,221.703217 &#10;&#9;C722.186829,203.772552 722.186829,186.136292 722.186768,167.500031 &#10;M693.874084,105.705917 &#10;&#9;C694.161865,108.317619 693.996277,111.082596 694.818359,113.513657 &#10;&#9;C697.864563,122.523041 707.360413,127.809273 716.111023,125.689056 &#10;&#9;C725.595581,123.391022 731.874146,114.833977 730.964233,105.445831 &#10;&#9;C730.080322,96.326210 722.436279,89.142319 713.360352,88.901741 &#10;&#9;C702.804932,88.621941 695.470032,94.627678 693.874084,105.705917 &#10;z'
                    style={{
                      fill: 'none',
                      fillOpacity: 0
                    }}
                  />
                  <path
                    fill='#E5AB27'
                    opacity={1}
                    stroke='none'
                    d='&#10;M65.238754,232.883667 &#10;&#9;C52.652184,230.894821 40.064758,228.911331 27.481022,226.904709 &#10;&#9;C26.667992,226.775055 25.789675,226.624268 25.102488,226.214020 &#10;&#9;C22.719191,224.791214 20.406879,223.249496 18.067570,221.753006 &#10;&#9;C20.379303,220.165955 22.485922,217.793655 25.038071,217.127029 &#10;&#9;C36.426533,214.152359 47.970562,211.779434 59.400322,208.954193 &#10;&#9;C65.346649,207.484360 71.172424,205.526779 78.137924,203.468903 &#10;&#9;C76.074547,199.603439 74.811485,195.732391 72.342171,192.920700 &#10;&#9;C66.998199,186.835800 60.976364,181.351364 55.347584,175.509750 &#10;&#9;C51.368687,171.380402 47.143929,167.375198 43.865719,162.724731 &#10;&#9;C41.819485,159.821945 39.772068,157.897934 36.448086,156.754959 &#10;&#9;C33.361282,155.693558 30.189594,154.303314 27.674629,152.285797 &#10;&#9;C23.623928,149.036285 24.054470,146.378662 29.020222,144.985825 &#10;&#9;C35.374634,143.203461 41.928608,141.617783 48.481258,141.160370 &#10;&#9;C63.769886,140.093140 78.871071,141.902908 94.089172,144.017197 &#10;&#9;C106.101639,145.686111 118.600555,144.037582 130.864319,143.458130 &#10;&#9;C132.243271,143.393005 133.889694,140.893234 134.742462,139.187668 &#10;&#9;C138.435822,131.800842 141.254578,123.903679 145.564178,116.915344 &#10;&#9;C151.822693,106.766663 161.677139,104.558998 173.028015,106.548531 &#10;&#9;C179.015396,107.597969 185.150497,107.980965 191.236694,108.229630 &#10;&#9;C195.441772,108.401428 196.425140,109.326942 194.678696,113.206787 &#10;&#9;C192.913803,117.127579 190.887070,120.930504 188.636322,125.318909 &#10;&#9;C183.868851,135.979553 178.924805,145.918213 175.140747,156.280441 &#10;&#9;C170.321762,169.476746 164.887115,182.161057 155.552017,192.903870 &#10;&#9;C138.861740,212.111008 116.836937,221.416000 92.779289,226.960815 &#10;&#9;C83.630089,229.069504 74.420708,230.917084 65.238754,232.883667 &#10;z'
                  />
                  <path
                    fill='#0574B0'
                    opacity={1}
                    stroke='none'
                    d='&#10;M346.442566,197.606628 &#10;&#9;C340.415466,185.594635 334.574432,173.906815 328.733429,162.218979 &#10;&#9;C328.385345,162.291916 328.037292,162.364853 327.689240,162.437790 &#10;&#9;C327.689240,181.415543 327.689240,200.393295 327.689240,219.686157 &#10;&#9;C321.707214,219.686157 316.302704,219.686157 310.529114,219.686157 &#10;&#9;C310.529114,190.216400 310.529114,160.662811 310.529114,130.382446 &#10;&#9;C316.694183,130.382446 322.970734,130.181564 329.212921,130.554977 &#10;&#9;C330.435364,130.628098 331.885590,132.746231 332.619843,134.224594 &#10;&#9;C340.169373,149.423904 347.589478,164.687454 355.056671,179.927704 &#10;&#9;C355.921021,181.691788 356.852112,183.423157 358.122101,185.887146 &#10;&#9;C359.258606,183.843857 360.154175,182.397507 360.895294,180.875946 &#10;&#9;C368.472504,165.319794 376.104034,149.789047 383.510590,134.151840 &#10;&#9;C384.843018,131.338745 386.342590,130.128510 389.501678,130.278091 &#10;&#9;C394.784210,130.528183 400.087158,130.346390 405.669434,130.346390 &#10;&#9;C405.669434,160.365387 405.669434,189.905167 405.669434,219.726990 &#10;&#9;C400.159485,219.726990 394.758545,219.726990 388.669006,219.726990 &#10;&#9;C388.669006,200.643692 388.669006,181.662811 388.669006,162.681931 &#10;&#9;C388.270203,162.596115 387.871399,162.510315 387.472595,162.424515 &#10;&#9;C386.359619,164.568909 385.216156,166.698135 384.138702,168.860260 &#10;&#9;C378.424377,180.326920 372.619598,191.750687 367.096405,203.308899 &#10;&#9;C365.667938,206.298279 363.834442,206.902145 360.684570,207.407013 &#10;&#9;C352.643219,208.695908 348.807312,204.796890 346.442566,197.606628 &#10;z'
                  />
                  <path
                    fill='#0473B0'
                    opacity={1}
                    stroke='none'
                    d='&#10;M627.855103,153.757584 &#10;&#9;C624.767395,162.510147 617.803772,161.604736 611.077820,161.345184 &#10;&#9;C608.116577,161.230927 605.147278,161.325928 601.740417,161.325928 &#10;&#9;C601.977661,154.229324 604.630920,148.665405 608.955872,143.895248 &#10;&#9;C623.581360,127.764099 655.343811,127.286247 670.552673,142.838776 &#10;&#9;C675.835327,148.240829 678.069763,154.874557 678.748535,162.186539 &#10;&#9;C678.871399,163.509293 678.831665,164.849060 678.832031,166.180969 &#10;&#9;C678.836792,183.327530 678.835205,200.474075 678.835205,218.525513 &#10;&#9;C672.929138,218.525513 667.187073,218.658661 661.464600,218.383087 &#10;&#9;C660.598633,218.341385 659.451477,216.511810 659.083740,215.310471 &#10;&#9;C658.279297,212.682022 657.892029,209.925888 657.119324,206.179901 &#10;&#9;C650.640625,215.398514 642.533508,220.565659 632.273193,220.350662 &#10;&#9;C625.608765,220.211014 618.615662,219.101486 612.429626,216.715714 &#10;&#9;C603.319092,213.202042 599.345764,205.156601 599.072205,195.642380 &#10;&#9;C598.803101,186.283463 602.443359,178.318130 611.059509,174.253067 &#10;&#9;C616.932922,171.482010 623.598999,169.727814 630.070618,169.053207 &#10;&#9;C638.429688,168.181824 646.948425,168.840866 655.646729,168.840866 &#10;&#9;C656.359619,162.441437 655.389771,157.004700 650.700867,153.390442 &#10;&#9;C644.949402,148.957230 638.262207,149.386963 631.672424,151.675964 &#10;&#9;C630.434326,152.106003 629.321716,152.897293 627.855103,153.757584 &#10;M653.809875,189.073395 &#10;&#9;C654.221802,187.190857 654.633728,185.308319 655.103455,183.161743 &#10;&#9;C646.934143,183.161743 639.292847,182.774612 631.713318,183.292282 &#10;&#9;C626.290588,183.662674 623.292358,187.558640 623.148071,192.619400 &#10;&#9;C622.992188,198.086884 625.736267,201.399628 631.488586,202.688538 &#10;&#9;C640.767334,204.767624 648.767090,200.098206 653.809875,189.073395 &#10;z'
                  />
                  <path
                    fill='#0473B0'
                    opacity={1}
                    stroke='none'
                    d='&#10;M422.728729,152.785385 &#10;&#9;C440.706177,122.399536 479.498535,122.245033 498.562622,145.514450 &#10;&#9;C499.072357,146.136612 499.465363,146.854416 500.127350,147.850418 &#10;&#9;C491.364685,156.617126 482.697113,165.326767 473.986206,173.992798 &#10;&#9;C465.403076,182.531738 456.775940,191.026489 447.661011,200.042206 &#10;&#9;C454.684784,204.748718 461.614471,204.421539 468.422302,203.515518 &#10;&#9;C475.266724,202.604660 480.976990,199.079605 485.218567,193.628571 &#10;&#9;C487.233490,191.039124 489.105743,190.684830 491.995422,191.941345 &#10;&#9;C495.894012,193.636505 499.972839,194.917038 504.024261,196.393692 &#10;&#9;C492.568298,218.941849 464.447388,227.818176 442.136139,216.354294 &#10;&#9;C419.013885,204.473694 410.349640,176.495377 422.728729,152.785385 &#10;M464.986877,159.486710 &#10;&#9;C468.388947,155.920532 471.790985,152.354370 475.291290,148.685196 &#10;&#9;C464.802185,143.415207 449.646515,146.948593 442.074432,155.372421 &#10;&#9;C434.289124,164.033356 431.527924,178.748734 437.094788,187.576752 &#10;&#9;C446.300903,178.303925 455.393768,169.145187 464.986877,159.486710 &#10;z'
                  />
                  <path
                    fill='#0473B0'
                    opacity={1}
                    stroke='none'
                    d='&#10;M581.795410,211.811172 &#10;&#9;C566.444519,223.115555 546.239319,224.430099 530.798157,215.324158 &#10;&#9;C514.303284,205.596802 505.156555,187.508652 508.053467,168.869141 &#10;&#9;C511.068085,149.472229 522.275818,136.292587 541.061829,130.852478 &#10;&#9;C558.775757,125.722839 574.529785,130.247971 587.562988,143.674255 &#10;&#9;C590.348267,146.543503 590.442810,148.334824 587.445618,151.269272 &#10;&#9;C572.340759,166.057556 557.473572,181.088531 542.533447,196.044754 &#10;&#9;C541.273010,197.306534 540.089172,198.644882 538.854004,199.964523 &#10;&#9;C545.581848,205.441162 559.557739,205.528214 568.271484,200.063065 &#10;&#9;C571.179138,198.239441 573.833557,195.811981 576.092163,193.215546 &#10;&#9;C577.964783,191.062851 579.536560,190.699326 582.081604,191.766708 &#10;&#9;C586.162781,193.478317 590.391479,194.838272 595.873047,196.823059 &#10;&#9;C590.809204,202.248337 586.446167,206.922821 581.795410,211.811172 &#10;M531.826111,156.360107 &#10;&#9;C524.007812,165.605850 523.587646,176.010147 526.268066,186.297913 &#10;&#9;C539.380066,173.745407 552.471558,161.212524 565.634521,148.611176 &#10;&#9;C556.012329,143.231339 541.740051,146.427841 531.826111,156.360107 &#10;z'
                  />
                  <path
                    fill='#0473B0'
                    opacity={1}
                    stroke='none'
                    d='&#10;M241.858521,129.702209 &#10;&#9;C270.957825,124.359100 294.504822,143.539871 295.221558,172.559738 &#10;&#9;C295.646332,189.757126 290.879120,204.673370 275.898560,214.451218 &#10;&#9;C252.089111,229.991684 211.214264,221.064240 207.097473,181.192291 &#10;&#9;C205.702667,167.683441 208.172760,154.957520 217.067276,144.136673 &#10;&#9;C223.416489,136.412384 231.504776,131.511536 241.858521,129.702209 &#10;M255.885712,205.820648 &#10;&#9;C266.801239,203.657593 273.491577,196.955933 276.438171,186.415543 &#10;&#9;C278.641327,178.534546 278.571777,170.594986 276.127502,162.771042 &#10;&#9;C271.979492,149.493607 260.493835,142.512909 246.736465,144.774597 &#10;&#9;C233.674255,146.922012 226.175476,155.280701 224.465485,170.364563 &#10;&#9;C222.307541,189.399750 231.810913,208.124786 255.885712,205.820648 &#10;z'
                  />
                  <path
                    fill='#0573AE'
                    opacity={1}
                    stroke='none'
                    d='&#10;M65.618385,232.974426 &#10;&#9;C74.420708,230.917084 83.630089,229.069504 92.779289,226.960815 &#10;&#9;C116.836937,221.416000 138.861740,212.111008 155.552017,192.903870 &#10;&#9;C164.887115,182.161057 170.321762,169.476746 175.140747,156.280441 &#10;&#9;C178.924805,145.918213 183.868851,135.979553 188.561523,125.713715 &#10;&#9;C189.633820,164.789932 177.276505,197.801102 142.892731,219.578720 &#10;&#9;C121.400085,233.191483 97.509071,237.404724 72.310074,234.176437 &#10;&#9;C70.193336,233.905289 68.101448,233.440201 65.618385,232.974426 &#10;z'
                  />
                  <path
                    fill='#0071AF'
                    opacity={1}
                    stroke='none'
                    d='&#10;M722.186768,168.000031 &#10;&#9;C722.186829,186.136292 722.186829,203.772552 722.186829,221.703217 &#10;&#9;C715.644592,221.703217 709.409241,221.703217 702.908691,221.703217 &#10;&#9;C702.908691,193.304764 702.908691,165.042679 702.908691,136.390259 &#10;&#9;C709.041626,136.390259 715.260620,136.390259 722.186768,136.390259 &#10;&#9;C722.186768,146.669464 722.186768,157.084747 722.186768,168.000031 &#10;z'
                  />
                  <path
                    fill='#E5AC29'
                    opacity={1}
                    stroke='none'
                    d='&#10;M693.892334,105.266487 &#10;&#9;C695.470032,94.627678 702.804932,88.621941 713.360352,88.901741 &#10;&#9;C722.436279,89.142319 730.080322,96.326210 730.964233,105.445831 &#10;&#9;C731.874146,114.833977 725.595581,123.391022 716.111023,125.689056 &#10;&#9;C707.360413,127.809273 697.864563,122.523041 694.818359,113.513657 &#10;&#9;C693.996277,111.082596 694.161865,108.317619 693.892334,105.266487 &#10;M717.779175,114.508881 &#10;&#9;C721.421997,110.362923 722.236023,105.960083 719.691284,102.441833 &#10;&#9;C717.289124,99.120705 714.093079,97.300713 709.833313,98.745850 &#10;&#9;C704.650635,100.504066 702.115356,105.269455 703.782410,109.987984 &#10;&#9;C705.814819,115.740677 710.479492,117.472229 717.779175,114.508881 &#10;z'
                  />
                  <ellipse
                    style={{
                      stroke: 'rgb(4, 115, 176)',
                      paintOrder: 'stroke',
                      fill: 'rgb(4, 115, 176)'
                    }}
                    cx={173.036}
                    cy={119.109}
                    rx={3.751}
                    ry={4.22}
                  />
                  <ellipse
                    style={{
                      fill: 'rgb(216, 216, 216)',
                      stroke: 'rgb(0, 0, 0)'
                    }}
                  />
                </svg>
              </Box>
              <Box sx={{ my: 6 }}>
                <Typography variant='h3' sx={{ mb: 1.5 }}>
                  {`Welcome to omeeai.com 👋🏻`}
                </Typography>
                <Typography sx={{ color: 'text.secondary' }}>Please sign-in to your account.</Typography>
              </Box>
              <form noValidate autoComplete='off' onSubmit={handleSubmit(handleLogin)}>
                <Box sx={{ mb: 4 }}>
                  <Controller
                    name='email'
                    control={control}
                    rules={{ required: true }}
                    render={({ field: { value, onChange, onBlur } }) => (
                      <CustomTextField
                        fullWidth
                        autoFocus
                        label='Email'
                        value={value}
                        onBlur={onBlur}
                        onChange={onChange}
                        placeholder='admin@vuexy.com'
                        error={Boolean(errors.email)}
                        {...(errors.email && { helperText: errors.email.message })}
                      />
                    )}
                  />
                </Box>
                <Box sx={{ mb: 1.5 }}>
                  <Controller
                    name='password'
                    control={control}
                    rules={{ required: true }}
                    render={({ field: { value, onChange, onBlur } }) => (
                      <CustomTextField
                        fullWidth
                        value={value}
                        onBlur={onBlur}
                        label='Password'
                        onChange={onChange}
                        id='auth-login-v2-password'
                        placeholder='********'
                        error={Boolean(errors.password)}
                        {...(errors.password && { helperText: errors.password.message })}
                        type={showPassword ? 'text' : 'password'}
                        InputProps={{
                          endAdornment: (
                            <InputAdornment position='end'>
                              <IconButton
                                edge='end'
                                onMouseDown={e => e.preventDefault()}
                                onClick={() => setShowPassword(!showPassword)}
                              >
                                <Icon fontSize='1.25rem' icon={showPassword ? 'tabler:eye' : 'tabler:eye-off'} />
                              </IconButton>
                            </InputAdornment>
                          )
                        }}
                      />
                    )}
                  />
                </Box>
                <Box
                  sx={{
                    mb: 1.75,
                    mt: 1.75,
                    display: 'flex',
                    flexWrap: 'wrap',
                    alignItems: 'center',
                    justifyContent: 'end'
                  }}
                ></Box>
                {error && (
                  <Alert
                    icon={false}
                    sx={{
                      py: 3,
                      mb: 6,
                      backgroundColor: 'rgba(234,84,85,.12)',
                      justifyContent: 'center',
                      textAlign: 'center',
                      '& .MuiAlert-message': { p: 0 }
                    }}
                  >
                    <Typography variant='body2' sx={{ color: '#ea5455', fontWeight: 500, fontSize: '15px' }}>
                      <Box dangerouslySetInnerHTML={{ __html: error }}></Box>
                    </Typography>
                  </Alert>
                )}
                <Button fullWidth type='submit' variant='contained' sx={{ mb: 4 }} disabled={isLoading}>
                  Sign In
                </Button>
                <Box sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap', justifyContent: 'center' }}>
                  <Typography sx={{ color: 'text.secondary', mr: 2 }}>New on our platform?</Typography>
                  <Typography href='/register' component={LinkStyled}>
                    Create an account
                  </Typography>
                </Box>
                <Divider
                  sx={{
                    color: 'text.disabled',
                    '& .MuiDivider-wrapper': { px: 6 },
                    fontSize: theme.typography.body2.fontSize,
                    my: theme => `${theme.spacing(6)} !important`
                  }}
                >
                  or
                </Divider>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                  <GoogleLogin onSuccess={onSuccess} onError={onError} />
                </Box>
              </form>
            </Box>
          </Box>
        </RightWrapper>
      </Box>
    </>
  )
}
LoginPage.getLayout = page => <BlankLayout>{page}</BlankLayout>
LoginPage.guestGuard = true

export default LoginPage
