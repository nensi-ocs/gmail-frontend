on:
  push:
    branches:
    - main
    - dev
    - fronted_fix
  workflow_dispatch:


name: "🚀 Build and Deploy website"

env:
  # choose: ssh | password
  DEPLOY_WITH: ssh

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: "🏗 Build"
    runs-on: ubuntu-latest
    steps:
    - name: "🚚 Get latest code"
      uses: actions/checkout@v4

    - name: "🔧 Setup Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: "npm"

    - name: "📦 Install dependencies"
      run: npm ci

    - name: "🏗 Build and Export"
      run: npm run build && npm run export

    - name: "📦 Archive production artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: built-site
        path: ./out/
        if-no-files-found: error

  deploy-hostinger-ssh:
    name: "🚀 Deploy to Hostinger (SSH Key)"
    needs: build
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fronted_fix') && env.DEPLOY_WITH == 'ssh'
    steps:
    - name: "📥 Download artifact → ./out"
      uses: actions/download-artifact@v4
      with:
        name: built-site
        path: ./out

    - name: "🔍 Verify artifact contents"
      run: |
        echo "Top-level:"
        ls -la
        echo "out/:"
        ls -la out/ || true
        echo "Sample files:"
        find out -maxdepth 2 -type f | head -20

    - name: "🔑 Setup SSH key"
      run: |
        mkdir -p ~/.ssh
        printf "%s" "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: "📤 Upload files to Hostinger"
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key_path: ~/.ssh/id_ed25519
        source: "out/**" # ✅ upload the actual files
        target: "/tmp/gmail_ext_front_temp/" # temp stage on server

    - name: "🚀 Deploy to Apache"
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key_path: ~/.ssh/id_ed25519
        script: |
          set -euo pipefail

          # Backup previous deploy (if any)
          if [ -d "/var/www/html/gmail_ext_front" ]; then
            sudo mkdir -p /var/www/html/backups
            sudo cp -r /var/www/html/gmail_ext_front /var/www/html/backups/gmail_ext_front_backup_$(date +%Y%m%d_%H%M%S)
          fi

          # Ensure target exists
          sudo mkdir -p /var/www/html/gmail_ext_front

          # Sync staged files -> live (preserves perms, deletes removed assets)
          sudo rsync -a --delete /tmp/gmail_ext_front_temp/ /var/www/html/gmail_ext_front/

          # Permissions
          sudo chown -R www-data:www-data /var/www/html/gmail_ext_front
          sudo chmod -R 755 /var/www/html/gmail_ext_front

          # SPA routing + headers
          sudo tee /var/www/html/gmail_ext_front/.htaccess > /dev/null << 'EOF'
          RewriteEngine On
          RewriteBase /

          # Client-side routing for SPA
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteCond %{REQUEST_URI} !^/api/
          RewriteCond %{REQUEST_URI} !\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$
          RewriteRule ^.*$ /index.html [L]

          # Proxy API to backend
          RewriteCond %{REQUEST_URI} ^/api/(.*)$
          RewriteRule ^api/(.*)$ https://api.omeeai.com/om/%1 [P,L]

          # Security headers
          <IfModule mod_headers.c>
            Header always set X-Content-Type-Options nosniff
            Header always set X-Frame-Options DENY
            Header always set X-XSS-Protection "1; mode=block"
            Header always set Referrer-Policy "strict-origin-when-cross-origin"
          </IfModule>

          # Cache static assets
          <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/css "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/svg+xml "access plus 1 year"
          </IfModule>
          EOF

          # Enable required Apache modules (Proxy needed for [P])
          sudo a2enmod rewrite headers expires proxy proxy_http deflate
          sudo systemctl reload apache2
          echo "✅ SSH deploy complete"

  deploy-hostinger-password:
    name: "🚀 Deploy to Hostinger (Password Auth)"
    needs: build
    runs-on: ubuntu-latest
    if: >
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/fronted_fix') && env.DEPLOY_WITH == 'password'
    steps:
    - name: "📥 Download artifact → ./out"
      uses: actions/download-artifact@v4
      with:
        name: built-site
        path: ./out

    - name: "🔍 Verify artifact contents"
      run: |
        echo "out/:"
        ls -la out/ || true
        find out -maxdepth 2 -type f | head -20

    - name: "📤 Upload files to Hostinger"
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "out/**" # ✅ not just 'out/'
        target: "/tmp/gmail_ext_front_temp/"

    - name: "🚀 Deploy to Apache"
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          set -euo pipefail
          if [ -d "/var/www/html/gmail_ext_front" ]; then
            sudo mkdir -p /var/www/html/backups
            sudo cp -r /var/www/html/gmail_ext_front /var/www/html/backups/gmail_ext_front_backup_$(date +%Y%m%d_%H%M%S)
          fi
          sudo mkdir -p /var/www/html/gmail_ext_front
          sudo rsync -a --delete /tmp/gmail_ext_front_temp/ /var/www/html/gmail_ext_front/
          sudo chown -R www-data:www-data /var/www/html/gmail_ext_front
          sudo chmod -R 755 /var/www/html/gmail_ext_front

          sudo tee /var/www/html/gmail_ext_front/.htaccess > /dev/null << 'EOF'
          RewriteEngine On
          RewriteBase /
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteCond %{REQUEST_URI} !^/api/
          RewriteCond %{REQUEST_URI} !\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$
          RewriteRule ^.*$ /index.html [L]
          RewriteCond %{REQUEST_URI} ^/api/(.*)$
          RewriteRule ^api/(.*)$ https://api.omeeai.com/om/%1 [P,L]
          <IfModule mod_headers.c>
            Header always set X-Content-Type-Options nosniff
            Header always set X-Frame-Options DENY
            Header always set X-XSS-Protection "1; mode=block"
            Header always set Referrer-Policy "strict-origin-when-cross-origin"
          </IfModule>
          <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/css "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/svg+xml "access plus 1 year"
          </IfModule>
          EOF

          sudo a2enmod rewrite headers expires proxy proxy_http deflate
          sudo systemctl reload apache2
          echo "✅ Password deploy complete"

  deploy-original-ftp:
    name: "🚀 Deploy Original (FTP) - dev"
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
    - name: "📥 Download artifact"
      uses: actions/download-artifact@v4
      with:
        name: built-site
        path: ./out

    - name: "📂 Sync files via FTP"
      uses: SamKirkland/FTP-Deploy-Action@4.3.3
      with:
        server: ${{ secrets.DEV_FTP_SERVER }}
        username: ${{ secrets.DEV_FTP_USERNAME }}
        password: ${{ secrets.DEV_FTP_PASSWORD }}
        local-dir: ./out/
